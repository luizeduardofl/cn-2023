# -*- coding: utf-8 -*-
"""Laboratório 5 - Interpolação.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k2DGcchbjX847JG39qPnJ_ci-oD4bjLl
"""

# INTERPOLAÇÃO DE LAGRANGE
import numpy as np

def lagrange(p, x0, y0, n):
  Pnx = 0
  for i in range(0, n+1):
    L = 1
    for j in range(0, n+1):
      if i != j:
        L = L * (p-x0[j])/(x0[i]-x0[j])
    Pnx = Pnx + y0[i]*L
  return Pnx

# INTERPOLAÇÃO DE NEWTON

import numpy as np

def p_erro(x0, x1, x2, erro, p):
  return (erro * (p-x0) * (p-x1) * (p-x2))

def CTDD(x, y): # CONSTRUÇÃO DA TABELA DE DIFERENÇAS DIVIDIDAS
  n = np.size(x)
  T = np.zeros((n,n))
  for i in range(n):
    T[i,0] = y[i]
  for j in range(1,n):
    for i in range(n-j):
      T[i,j] = (T[i+1,j-1] - T[i,j-1]) / (x[i+j] - x[i])

def p_Newton(x, y, n, p):
  T = CTDD(x, y)
  Soma = T[0,0]
  for i in range(1,n+1):
    M = T[0,i]
    for j in range(i):
      M = M * (p-x[j])
    Soma = Soma + M
  return Soma

"""QUESTÃO 1"""

import numpy as np

a = float(input())
n = int(input())
x = [float(input()) for x in range(n+1)]
y = [float(input()) for x in range(n+1)]

def lagrange(a, x, y, n):
  Pnx = 0
  for i in range(0, n+1):
    L = 1
    for j in range(0, n+1):
      if i != j:
        L = L * (a-x[j])/(x[i]-x[j])
    Pnx = Pnx + y[i]*L
  return Pnx

PdeA = lagrange(a, x, y, n)
print(f'{PdeA:.4f}')

"""QUESTÃO 2"""

import numpy as np

a = float(input())
n = int(input())
x = [float(input()) for x in range(n+1)]
y = [float(input()) for x in range(n+1)]

def TDD(x, y):
  n = np.size(x)
  T = np.zeros((n,n))
  T[:,0] = y
  for j in range(1,n):
    for i in range(n-j):
      T[i,j] = (T[i+1,j-1] - T[i,j-1]) / (x[i+j] - x[i])
  return T

def p_Newton(x, T, n, a):
  Soma = T[0,0]
  for i in range(1,n+1):
    M = T[0,i]
    for j in range(i):
      M = M * (a-x[j])
    Soma = Soma + M
  return Soma

T = TDD(x, y)

bn = T[0,n]
PdeA = p_Newton(x, T, n, a)
soma = PdeA + bn

print(f'{soma:.4f}')

"""QUESTÃO 3"""

import numpy as np

a = 75
n = 2
x = np.array([46., 67., 86.])
y = np.array([15.3, 14.6, 12.5])

def lagrange(p, x0, y0, n):
  Pnx = 0
  for i in range(n+1):
    L = 1
    for j in range(n+1):
      if i != j:
        L = L * (p-x0[j])/(x0[i]-x0[j])
    Pnx = Pnx + y0[i]*L
  return Pnx

PdeA = lagrange(a, x, y, n)

print(PdeA)

"""QUESTÃO 4"""

a = 79
n = 4
# N é o número de pontos, e não o grau do polinômio, como nas outras questões.
x = np.array([52., 70., 89., 107.])
y = np.array([14.7, 14.3, 12.2, 9.4])

def TDD(x, y):
  n = np.size(x)
  T = np.zeros((n,n))
  T[:,0] = y
  for j in range(1,n):
    for i in range(n-j):
      T[i,j] = (T[i+1,j-1] - T[i,j-1]) / (x[i+j] - x[i])
  return T

def p_Newton(x, T, n, a):
  Soma = T[0,0]
  for i in range(1,n):
    M = T[0,i]
    for j in range(i):
      M = M * (a-x[j])
    Soma = Soma + M
  return Soma

T = TDD(x, y)
bn = T[0,n-1]
PdeA = p_Newton(x, T, n, a)

P = 1
for i in range(n-1):
  P = P * (a-x[i])
erro = bn * P

print(erro)