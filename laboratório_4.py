# -*- coding: utf-8 -*-
"""Laboratório 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I08xohpaLF1q8RbgnYA-KEnNWe7jdI41

QUESTÃO 1
"""

import numpy as np

n = int(input())
arrayX = [float(input()) for x in range(n)]
arrayY = [float(input()) for x in range(n)]
x = np.array(arrayX).reshape((n,1))
y = np.array(arrayY).reshape((n,1))



X = np.concatenate((x**0, x), 1)
c = np.copy(y)

XTX = np.transpose(X)@X
XTc = np.transpose(X)@c

a = np.linalg.solve(XTX, XTc) # ou ac1 = np.linalg.inv(XTX)

VE = c - X@a

EQ = np.sum(VE**2)

soma = np.sum(a) + EQ
print(f'{soma:.4f}')

"""QUESTÃO 2

"""

import numpy as np

n = int(input())
m = int(input())
arrayX = [float(input()) for x in range(m)]
arrayY = [float(input()) for x in range(m)]
x = np.array(arrayX).reshape((m,1))
y = np.array(arrayY).reshape((m,1))

X = np.ones((m,1))

for i in range(1, n+1):
  X = np.concatenate((X, x**i),1)

XTX = np.transpose(X)@X
XTy = np.transpose(X)@y

a = np.linalg.solve(XTX,XTy)
vetor_erro = X@a - y
EQ = np.sum(vetor_erro**2)

soma = np.sum(a) + EQ
print(f'{soma:.4f}')

"""QUESTÃO 3

"""

import numpy as np

n = int(input())
arrayX = [float(input()) for x in range(n)]
arrayY = [float(input()) for x in range(n)]
x = np.array(arrayX).reshape((n,1))
y = np.array(arrayY).reshape((n,1))

def f0(x):
  return np.log(0.3*x)

def f1(x):
  return np.exp(-x/3)

F = np.concatenate((f0(x), f1(x)),1)
FTF = np.transpose(F)@F
FTy = np.transpose(F)@y

a = np.linalg.solve(FTF, FTy)

vetor_erro = y - F@a
EQ = np.sum(vetor_erro**2)

soma = np.sum(a) + EQ
print(f'{soma:.4f}')

"""QUESTÃO 4"""

import numpy as np

n = int(input())
arrayX = [float(input()) for x in range(n)]
arrayY = [float(input()) for x in range(n)]
x = np.array(arrayX).reshape((n,1))
y = np.array(arrayY).reshape((n,1))

X = np.concatenate((x**0, x), 1)

# A linearização será feita de forma que H(t) = ln(y) - ln(t), a0 = ln(A)
# e a1 = -B.
H = np.log(y) - np.log(x)

XTX = np.transpose(X)@X
XTH = np.transpose(X)@H

a = np.linalg.solve(XTX, XTH)

vetor_erro = H - X@a
EQ = np.sum(vetor_erro**2)

a[0,0] = np.exp(a[0,0])
a[1,0] = (-1)*a[1,0]

soma = np.sum(a) + EQ
print(f'{soma:.4f}')

"""QUESTÃO 5 (letras "a" e "b")"""

import matplotlib.pyplot as plt
import numpy as np

x = np.array([[5.3],[2.3],[0.1],[8.2]])
y = np.array([[7.6],[8.2],[0.7],[5.4]])

# Letra a)

X = np.concatenate((x**0, x), 1)

XTX = np.transpose(X)@X
XTy = np.transpose(X)@y

a = np.linalg.solve(XTX, XTy)
print(f'O valor de A é: {a[0,0]}')
print(f'O valor de B é: {a[1,0]}')

vetor_erro = X@a - y
EQ = np.sum(vetor_erro**2)

print(f'O erro quadrático é igual a {EQ}')

# Letra b)
xg = np.linspace(0, x[np.size(x)-1,0]+1, 100)
yg = a[0,0] + a[1,0]*xg
plt.plot(x,y, 'o')
plt.plot(xg,yg)
plt.show()

"""QUESTÃO 5 (letras "c" e "d")"""

import matplotlib.pyplot as plt
import numpy as np

x = np.array([[5.3],[2.3],[0.1],[8.2]])
y = np.array([[7.6],[8.2],[0.7],[5.4]])

# Letra c)

# A linearização será feita como segue: H(t) = ln(i(t)) - ln(t),
# a0 = ln(A) e a1 = -B

X = np.concatenate((x**0, x),1)
H = np.log(y) - np.log(x)

XTX = np.transpose(X)@X
XTH = np.transpose(X)@H

a = np.linalg.solve(XTX, XTH)

A = np.exp(a[0,0])
B = (-1)*a[1,0]

print(f'O valor de A é: {A}')
print(f'O valor de B é: {B}')

# Letra d)

plt.plot(x, y, 'o')

xg = np.linspace(0, x[np.size(x)-1,0]+1, 100)
yg = A * xg * np.exp(-B*xg)
plt.plot(xg,yg)