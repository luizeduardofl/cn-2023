# -*- coding: utf-8 -*-
"""Laboratório 7 - EDO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DUWdWgWquQ7tbeREqfllLEQcz3LBzAdC

QUESTÃO 1
"""

import numpy as np

exp = input()
x0 = float(input())
y0 = float(input())
h = float(input())
n = int(input())
g = lambda x, y: eval(exp)

def Euler(g, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k = g(xk[i], yk[i])
    xk[i+1] = xk[i] + h
    yk[i+1] = yk[i] + k * h
  return(xk, yk)

solucao = Euler(g, x0, y0, h, n)
saida = solucao[1][n]

print(f'{saida:.3f}')

"""QUESTÃO 2"""

import numpy as np

exp = input()
x0 = float(input())
y0 = float(input())
h = float(input())
n = int(input())
g = lambda x, y: eval(exp)

def Heun(g, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k0 = g(xk[i], yk[i])
    yk[i+1] = yk[i] + k0 * h
    xk[i+1] = xk[i] + h
    k1 = g(xk[i+1], yk[i+1])
    yk[i+1] = yk[i] + (((k0 + k1) / 2) * h)
  return(xk, yk)

solucao = Heun(g, x0, y0, h, n)
saida = solucao[1][n]

print(f'{saida:.3f}')

"""QUESTÃO 3"""

import numpy as np

exp = input()
x0 = float(input())
y0 = float(input())
h = float(input())
n = int(input())
g = lambda x, y: eval(exp)

def PontoMedio(g, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k0 = g(xk[i], yk[i])
    yk[i+1] = yk[i] + ((k0 / 2) * h)
    xk[i+1] = xk[i] + (h/2)
    k1 = g(xk[i+1], yk[i+1])
    yk[i+1] = yk[i] + k1 * h
    xk[i+1] = xk[i] + h
  return(xk, yk)

solucao = PontoMedio(g, x0, y0, h, n)
saida = solucao[1][n]

print(f'{saida:.3f}')

"""QUESTÃO 4"""

import numpy as np

exp = input()
x0 = float(input())
y0 = float(input())
h = float(input())
n = int(input())
g = lambda x,y: eval(exp)

def RK4(g, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k1 = g(xk[i], yk[i])
    xk[i+1] = xk[i] + (h/2)
    yk[i+1] = yk[i] + (k1/2 * h)
    k2 = g(xk[i+1], yk[i+1])
    yk[i+1] = yk[i] + (k2/2 * h)
    k3 = g(xk[i+1], yk[i+1])
    yk[i+1] = yk[i] + k3 * h
    xk[i+1] = xk[i] + h
    k4 = g(xk[i+1], yk[i+1])
    yk[i+1] = yk[i] + (((k1 + 2*k2 + 2*k3 + k4) / 6) * h)
  return(xk, yk)

solucao = RK4(g, x0, y0, h, n)
saida = solucao[1][n]

print(f'{saida:.3f}')

"""QUESTÃO 5"""

import numpy as np
import matplotlib.pyplot as plt

t = [2 * i for i in range(27)]
y = [20.2, 19.1, 17.9, 16.6, 15.4, 14.5, 13.4, 12.5, 11.4, 10.4, 9.4, 8.5, 7.7,
     6.9, 6.3, 5.6, 5, 4.5, 3.8, 3.4, 2.9, 2.5, 2.2, 1.9, 1.6, 1.4, 1.1]

plt.plot(t, y, '.')
plt.title('Altura em função do tempo')
plt.xlabel('Tempo (s)')
plt.ylabel('Altura (cm)')
plt.grid()
plt.show()

"""QUESTÃO 6"""

import numpy as np
import matplotlib.pyplot as plt
t = [2 * i for i in range(27)]
y = [20.2, 19.1, 17.9, 16.6, 15.4, 14.5, 13.4, 12.5, 11.4, 10.4, 9.4, 8.5, 7.7,
     6.9, 6.3, 5.6, 5, 4.5, 3.8, 3.4, 2.9, 2.5, 2.2, 1.9, 1.6, 1.4, 1.1]

plt.plot(t, y, 'b.')
plt.title('Altura em função do tempo')
plt.xlabel('Tempo (s)')
plt.ylabel('Altura (cm)')

g = 9.8

def d1f(y):
  return -0.0315 * np.sqrt(2*g*y)

def Euler(d1f, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k = d1f(yk[i])
    xk[i+1] = xk[i] + h
    yk[i+1] = yk[i] + k * h
  return(xk, yk)

solucao = Euler(d1f, 0, 20, 4, 13)
xk = solucao[0][:]
yk = solucao[1][:]

plt.plot(xk, yk, 'r.')
plt.grid()
plt.show()

"""QUESTÃO 7"""

import numpy as np
import matplotlib.pyplot as plt
t = [2 * i for i in range(27)]
y = [20.2, 19.1, 17.9, 16.6, 15.4, 14.5, 13.4, 12.5, 11.4, 10.4, 9.4, 8.5, 7.7,
     6.9, 6.3, 5.6, 5, 4.5, 3.8, 3.4, 2.9, 2.5, 2.2, 1.9, 1.6, 1.4, 1.1]

plt.plot(t, y, 'b.')
plt.title('Altura em função do tempo')
plt.xlabel('Tempo (s)')
plt.ylabel('Altura (cm)')

g = 9.8

def d1f(y):
  return -0.0315 * np.sqrt(2*g*y)

def Euler(d1f, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k = d1f(yk[i])
    xk[i+1] = xk[i] + h
    yk[i+1] = yk[i] + k * h
  return(xk, yk)

solucao = Euler(d1f, 0, 20, 0.5, 104)
xk = solucao[0][:]
yk = solucao[1][:]

plt.plot(xk, yk, 'r.')
plt.grid()
plt.show()

"""QUESTÃO 8"""

import numpy as np
import matplotlib.pyplot as plt
t = [2 * i for i in range(27)]
y = [20.2, 19.1, 17.9, 16.6, 15.4, 14.5, 13.4, 12.5, 11.4, 10.4, 9.4, 8.5, 7.7,
     6.9, 6.3, 5.6, 5, 4.5, 3.8, 3.4, 2.9, 2.5, 2.2, 1.9, 1.6, 1.4, 1.1]

plt.plot(t, y, 'b.')
plt.title('Altura em função do tempo')
plt.xlabel('Tempo (s)')
plt.ylabel('Altura (cm)')

g = 9.8

def d1f(y):
  return -0.0315 * np.sqrt(2*g*y)

def Heun(d1f, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k0 = d1f(yk[i])
    yk[i+1] = yk[i] + k0 * h
    xk[i+1] = xk[i] + h
    k1 = d1f(yk[i+1])
    yk[i+1] = yk[i] + (((k0 + k1) / 2) * h)
  return(xk, yk)

def RK4(d1f, x0, y0, h, n):
  xk = np.zeros(n+1)
  yk = np.zeros(n+1)
  xk[0] = x0
  yk[0] = y0
  for i in range(n):
    k1 = d1f(yk[i])
    xk[i+1] = xk[i] + (h/2)
    yk[i+1] = yk[i] + (k1/2 * h)
    k2 = d1f(yk[i+1])
    yk[i+1] = yk[i] + (k2/2 * h)
    k3 = d1f(yk[i+1])
    xk[i+1] = xk[i] + h
    yk[i+1] = yk[i] + k3 * h
    k4 = d1f(yk[i+1])
    yk[i+1] = yk[i] + (((k1 + 2*k2 + 2*k3 + k4) / 6) * h)
  return(xk, yk)

solucao1 = Heun(d1f, 0, 20, 1, 52)
solucao2 = RK4(d1f, 0, 20, 1, 52)


xk1 = solucao1[0][:]
yk1 = solucao1[1][:]
xk2 = solucao2[0][:]
yk2 = solucao2[1][:]


plt.plot(xk1, yk1, 'r.')
plt.plot(xk2, yk2, 'g.')
plt.grid()
plt.show()